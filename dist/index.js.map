{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { watch } from 'chokidar';\nimport { existsSync, readFileSync, writeFileSync } from 'fs';\nimport { sync } from 'globby';\nimport * as normalizePath from 'normalize-path';\nimport {\n  basename,\n  dirname,\n  isAbsolute,\n  normalize,\n  relative,\n  resolve\n} from 'path';\nimport {\n  existsResolvedAlias,\n  getAbsoluteAliasPath,\n  getProjectDirPathInOutDir,\n  loadConfig\n} from './helpers';\nimport {\n  newStringRegex,\n  Output,\n  replaceSourceImportPaths,\n  resolveFullImportPaths\n} from './utils';\n\nexport interface ReplaceTscAliasPathsOptions {\n  configFile?: string;\n  outDir?: string;\n  watch?: boolean;\n  silent?: boolean;\n  resolveFullPaths?: boolean;\n}\n\ntype Assertion = (claim: any, message: string) => asserts claim;\n\nexport function replaceTscAliasPaths(\n  options: ReplaceTscAliasPathsOptions = {\n    watch: false,\n    silent: false\n  }\n) {\n  const output = new Output(options.silent);\n\n  output.info('=== tsc-alias starting ===');\n  if (!options.configFile) {\n    options.configFile = resolve(process.cwd(), 'tsconfig.json');\n  } else {\n    if (!isAbsolute(options.configFile)) {\n      options.configFile = resolve(process.cwd(), options.configFile);\n    }\n  }\n\n  const configFile = options.configFile;\n\n  const assert: Assertion = (claim, message) =>\n    claim || output.error(message, true);\n\n  assert(existsSync(configFile), `Invalid file path => ${configFile}`);\n\n  let { baseUrl, outDir, paths } = loadConfig(configFile);\n  if (options.outDir) {\n    outDir = options.outDir;\n  }\n  assert(baseUrl, 'compilerOptions.baseUrl is not set');\n  assert(paths, 'compilerOptions.paths is not set');\n  assert(outDir, 'compilerOptions.outDir is not set');\n\n  const configDir: string = normalizePath(dirname(configFile));\n\n  const outPath = normalizePath(normalize(configDir + '/' + outDir));\n\n  const confDirParentFolderName: string = basename(configDir);\n\n  let hasExtraModule = false;\n  let configDirInOutPath: string = null;\n  let relConfDirPathInOutPath: string;\n\n  const aliases = Object.keys(paths)\n    .map((alias) => {\n      const _paths = paths[alias as keyof typeof paths].map((path) => {\n        path = path.replace(/\\*$/, '').replace('.t', '.j');\n        if (isAbsolute(path)) {\n          path = relative(configDir, path);\n        }\n        return path;\n      });\n\n      const path = _paths[0];\n\n      const isExtra = null;\n      const basePath = null;\n      if (normalize(path).includes('..')) {\n        if (!configDirInOutPath) {\n          configDirInOutPath = getProjectDirPathInOutDir(\n            outPath,\n            confDirParentFolderName\n          );\n          if (configDirInOutPath) {\n            hasExtraModule = true;\n          }\n\n          // Find relative path access of configDir in outPath\n          if (configDirInOutPath) {\n            const stepsbackPath = relative(configDirInOutPath, outPath);\n            const splitStepBackPath = normalizePath(stepsbackPath).split('/');\n            const nbOfStepBack = splitStepBackPath.length;\n            const splitConfDirInOutPath = configDirInOutPath.split('/');\n\n            let i = 1;\n            const splitRelPath: string[] = [];\n            while (i <= nbOfStepBack) {\n              splitRelPath.unshift(\n                splitConfDirInOutPath[splitConfDirInOutPath.length - i]\n              );\n              i++;\n            }\n            relConfDirPathInOutPath = splitRelPath.join('/');\n          }\n        }\n      }\n\n      let prefix = alias.replace(/\\*$/, '');\n      if (prefix[prefix.length - 1] === '/') {\n        prefix = prefix.substring(0, prefix.length - 1);\n      }\n      return {\n        prefix,\n        basePath,\n        path,\n        paths: _paths,\n        isExtra\n      };\n    })\n    .filter(({ prefix }) => prefix);\n\n  /*********** Find basepath of aliases *****************/\n  aliases.forEach((alias) => {\n    if (normalize(alias.path).includes('..')) {\n      const tempBasePath = normalizePath(\n        normalize(\n          `${configDir}/${outDir}/${\n            hasExtraModule && relConfDirPathInOutPath\n              ? relConfDirPathInOutPath\n              : ''\n          }/${baseUrl}`\n        )\n      );\n\n      const absoluteBasePath = normalizePath(\n        normalize(`${tempBasePath}/${alias.path}`)\n      );\n      if (existsResolvedAlias(absoluteBasePath)) {\n        alias.isExtra = false;\n        alias.basePath = tempBasePath;\n      } else {\n        alias.isExtra = true;\n        alias.basePath = absoluteBasePath;\n      }\n    } else if (hasExtraModule) {\n      alias.isExtra = false;\n      alias.basePath = normalizePath(\n        normalize(\n          `${configDir}/${outDir}/${relConfDirPathInOutPath}/${baseUrl}`\n        )\n      );\n    } else {\n      alias.basePath = normalizePath(normalize(`${configDir}/${outDir}`));\n      alias.isExtra = false;\n    }\n  });\n\n  const replaceImportStatement = ({\n    orig,\n    file,\n    alias\n  }: {\n    orig: string;\n    file: string;\n    alias: typeof aliases[0];\n  }): string => {\n    const requiredModule = orig.match(newStringRegex())?.groups?.path;\n    assert(\n      typeof requiredModule == 'string',\n      `Unexpected import statement pattern ${orig}`\n    );\n    const index = orig.indexOf(alias.prefix);\n    const isAlias = requiredModule.includes('/')\n      ? requiredModule.startsWith(alias.prefix + '/')\n      : requiredModule.startsWith(alias.prefix);\n    if (index > -1 && isAlias) {\n      let absoluteAliasPath = getAbsoluteAliasPath(alias.basePath, alias.path);\n      let relativeAliasPath: string = normalizePath(\n        relative(dirname(file), absoluteAliasPath)\n      );\n\n      if (!relativeAliasPath.startsWith('.')) {\n        relativeAliasPath = './' + relativeAliasPath;\n      }\n\n      const newImportScript =\n        orig.substring(0, index) +\n        relativeAliasPath +\n        '/' +\n        orig.substring(index + alias.prefix.length);\n\n      const modulePath = newImportScript.match(newStringRegex()).groups.path;\n\n      return newImportScript.replace(modulePath, normalizePath(modulePath));\n    }\n    return orig;\n  };\n\n  const replaceAlias = (file: string, resolveFullPath?: boolean): boolean => {\n    const code = readFileSync(file, 'utf8');\n    let tempCode = code;\n    for (const alias of aliases) {\n      const replacementParams = {\n        file,\n        alias\n      };\n      tempCode = replaceSourceImportPaths(tempCode, file, (orig) =>\n        replaceImportStatement({\n          orig,\n          ...replacementParams\n        })\n      );\n    }\n\n    // Fully resolve all import paths (not just aliased ones)\n    // *after* the aliases are resolved\n    if (resolveFullPath) {\n      tempCode = resolveFullImportPaths(tempCode, file);\n    }\n\n    if (code !== tempCode) {\n      writeFileSync(file, tempCode, 'utf8');\n      return true;\n    }\n    return false;\n  };\n\n  // Finding files and changing alias paths\n  const globPattern = [\n    `${outPath}/**/*.{js,jsx,d.ts,d.tsx}`,\n    `!${outPath}/**/node_modules`\n  ];\n  const files = sync(globPattern, {\n    dot: true,\n    onlyFiles: true\n  });\n\n  const flen = files.length;\n  let replaceCount = 0;\n  for (let i = 0; i < flen; i += 1) {\n    const file = files[i];\n    if (replaceAlias(file, options?.resolveFullPaths)) {\n      replaceCount++;\n    }\n  }\n\n  output.info(`${replaceCount} files were affected!`);\n  if (options.watch) {\n    output.info('[Watching for file changes...]');\n    const filesWatcher = watch(globPattern);\n    const tsconfigWatcher = watch(configFile);\n    filesWatcher.on('change', (file) => {\n      replaceAlias(file, options?.resolveFullPaths);\n    });\n    tsconfigWatcher.on('change', (_) => {\n      output.clear();\n      filesWatcher.close();\n      tsconfigWatcher.close();\n      replaceTscAliasPaths(options);\n    });\n  }\n}\n"]}